// Mocks generated by Mockito 5.4.4 from annotations
// in ecommers/test/helper/test_hlper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i19;
import 'dart:convert' as _i40;
import 'dart:typed_data' as _i41;

import 'package:dartz/dartz.dart' as _i2;
import 'package:ecommers/core/Error/failure.dart' as _i20;
import 'package:ecommers/core/network/check_connectivity.dart' as _i13;
import 'package:ecommers/features/ecommerce/Data/data_source/local_data_source.dart'
    as _i24;
import 'package:ecommers/features/ecommerce/Data/data_source/remote_data_source.dart'
    as _i23;
import 'package:ecommers/features/ecommerce/Data/model/ecommerce_model.dart'
    as _i5;
import 'package:ecommers/features/ecommerce/Domain/entity/ecommerce_entity.dart'
    as _i21;
import 'package:ecommers/features/ecommerce/Domain/repositories/ecommerce_repositories.dart'
    as _i7;
import 'package:ecommers/features/ecommerce/Domain/usecase/ecommerce_usecase.dart'
    as _i8;
import 'package:ecommers/features/ecommerce/presentation/state/image_input_display/image_bloc.dart'
    as _i28;
import 'package:ecommers/features/ecommerce/presentation/state/image_input_display/image_event.dart'
    as _i29;
import 'package:ecommers/features/ecommerce/presentation/state/image_input_display/image_state.dart'
    as _i10;
import 'package:ecommers/features/ecommerce/presentation/state/input_button_activation/bottum_state.dart'
    as _i11;
import 'package:ecommers/features/ecommerce/presentation/state/input_button_activation/button_bloc.dart'
    as _i30;
import 'package:ecommers/features/ecommerce/presentation/state/input_button_activation/button_event.dart'
    as _i31;
import 'package:ecommers/features/ecommerce/presentation/state/product_bloc/product_bloc.dart'
    as _i25;
import 'package:ecommers/features/ecommerce/presentation/state/product_bloc/product_event.dart'
    as _i26;
import 'package:ecommers/features/ecommerce/presentation/state/product_bloc/product_state.dart'
    as _i9;
import 'package:ecommers/features/ecommerce/presentation/state/user_states/login_user_states_bloc.dart'
    as _i34;
import 'package:ecommers/features/ecommerce/presentation/state/user_states/login_user_states_event.dart'
    as _i35;
import 'package:ecommers/features/ecommerce/presentation/state/user_states/login_user_states_state.dart'
    as _i14;
import 'package:ecommers/features/login/data/datasource/remote_datasource.dart'
    as _i12;
import 'package:ecommers/features/login/data/repositories/login_repo_impl.dart'
    as _i33;
import 'package:ecommers/features/login/domain/entity/login_entity.dart'
    as _i32;
import 'package:ecommers/features/login/domain/repositories/login_repositories.dart'
    as _i15;
import 'package:ecommers/features/login/domain/usecase/login_usecase.dart'
    as _i16;
import 'package:ecommers/features/login/presentation/state/login/login_bloc.dart'
    as _i36;
import 'package:ecommers/features/login/presentation/state/login/login_event.dart'
    as _i37;
import 'package:ecommers/features/login/presentation/state/login/login_state.dart'
    as _i17;
import 'package:ecommers/features/login/presentation/state/Login_Registration/login_registration_bloc.dart'
    as _i38;
import 'package:ecommers/features/login/presentation/state/Login_Registration/login_registration_event.dart'
    as _i39;
import 'package:ecommers/features/login/presentation/state/Login_Registration/login_registration_state.dart'
    as _i18;
import 'package:flutter_bloc/flutter_bloc.dart' as _i27;
import 'package:http/http.dart' as _i3;
import 'package:internet_connection_checker/internet_connection_checker.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i22;
import 'package:shared_preferences/shared_preferences.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeClient_1 extends _i1.SmartFake implements _i3.Client {
  _FakeClient_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSharedPreferences_2 extends _i1.SmartFake
    implements _i4.SharedPreferences {
  _FakeSharedPreferences_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEcommerceModel_3 extends _i1.SmartFake
    implements _i5.EcommerceModel {
  _FakeEcommerceModel_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInternetConnectionChecker_4 extends _i1.SmartFake
    implements _i6.InternetConnectionChecker {
  _FakeInternetConnectionChecker_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDuration_5 extends _i1.SmartFake implements Duration {
  _FakeDuration_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAddressCheckResult_6 extends _i1.SmartFake
    implements _i6.AddressCheckResult {
  _FakeAddressCheckResult_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEcommerceRepositories_7 extends _i1.SmartFake
    implements _i7.EcommerceRepositories {
  _FakeEcommerceRepositories_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEcommerceUsecase_8 extends _i1.SmartFake
    implements _i8.EcommerceUsecase {
  _FakeEcommerceUsecase_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProductState_9 extends _i1.SmartFake implements _i9.ProductState {
  _FakeProductState_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeImageState_10 extends _i1.SmartFake implements _i10.ImageState {
  _FakeImageState_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBottumState_11 extends _i1.SmartFake implements _i11.BottumState {
  _FakeBottumState_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRemoteDatasource_12 extends _i1.SmartFake
    implements _i12.RemoteDatasource {
  _FakeRemoteDatasource_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNetworkInfo_13 extends _i1.SmartFake implements _i13.NetworkInfo {
  _FakeNetworkInfo_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLoginUserStates_14 extends _i1.SmartFake
    implements _i14.LoginUserStates {
  _FakeLoginUserStates_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLoginRepositories_15 extends _i1.SmartFake
    implements _i15.LoginRepositories {
  _FakeLoginRepositories_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLoginUseCase_16 extends _i1.SmartFake implements _i16.LoginUseCase {
  _FakeLoginUseCase_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLoginState_17 extends _i1.SmartFake implements _i17.LoginState {
  _FakeLoginState_17(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLoginRegistrationState_18 extends _i1.SmartFake
    implements _i18.LoginRegistrationState {
  _FakeLoginRegistrationState_18(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_19 extends _i1.SmartFake implements _i3.Response {
  _FakeResponse_19(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_20 extends _i1.SmartFake
    implements _i3.StreamedResponse {
  _FakeStreamedResponse_20(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [EcommerceRepositories].
///
/// See the documentation for Mockito's code generation for more information.
class MockEcommerceRepositories extends _i1.Mock
    implements _i7.EcommerceRepositories {
  MockEcommerceRepositories() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.Future<_i2.Either<_i20.Failure, _i21.EcommerceEntity>> getProductById(
          String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProductById,
          [id],
        ),
        returnValue:
            _i19.Future<_i2.Either<_i20.Failure, _i21.EcommerceEntity>>.value(
                _FakeEither_0<_i20.Failure, _i21.EcommerceEntity>(
          this,
          Invocation.method(
            #getProductById,
            [id],
          ),
        )),
      ) as _i19.Future<_i2.Either<_i20.Failure, _i21.EcommerceEntity>>);

  @override
  _i19.Future<_i2.Either<_i20.Failure, List<_i21.EcommerceEntity>>>
      getAllProduct() => (super.noSuchMethod(
            Invocation.method(
              #getAllProduct,
              [],
            ),
            returnValue: _i19.Future<
                    _i2.Either<_i20.Failure, List<_i21.EcommerceEntity>>>.value(
                _FakeEither_0<_i20.Failure, List<_i21.EcommerceEntity>>(
              this,
              Invocation.method(
                #getAllProduct,
                [],
              ),
            )),
          ) as _i19
              .Future<_i2.Either<_i20.Failure, List<_i21.EcommerceEntity>>>);

  @override
  _i19.Future<_i2.Either<_i20.Failure, bool>> addProduct(
          Map<String, dynamic>? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #addProduct,
          [product],
        ),
        returnValue: _i19.Future<_i2.Either<_i20.Failure, bool>>.value(
            _FakeEither_0<_i20.Failure, bool>(
          this,
          Invocation.method(
            #addProduct,
            [product],
          ),
        )),
      ) as _i19.Future<_i2.Either<_i20.Failure, bool>>);

  @override
  _i19.Future<_i2.Either<_i20.Failure, bool>> editeProduct(
    String? id,
    Map<String, dynamic>? product,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #editeProduct,
          [
            id,
            product,
          ],
        ),
        returnValue: _i19.Future<_i2.Either<_i20.Failure, bool>>.value(
            _FakeEither_0<_i20.Failure, bool>(
          this,
          Invocation.method(
            #editeProduct,
            [
              id,
              product,
            ],
          ),
        )),
      ) as _i19.Future<_i2.Either<_i20.Failure, bool>>);

  @override
  _i19.Future<_i2.Either<_i20.Failure, bool>> deleteProduct(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteProduct,
          [id],
        ),
        returnValue: _i19.Future<_i2.Either<_i20.Failure, bool>>.value(
            _FakeEither_0<_i20.Failure, bool>(
          this,
          Invocation.method(
            #deleteProduct,
            [id],
          ),
        )),
      ) as _i19.Future<_i2.Either<_i20.Failure, bool>>);

  @override
  _i19.Future<_i2.Either<_i20.Failure, Map<String, dynamic>>> selectImage() =>
      (super.noSuchMethod(
        Invocation.method(
          #selectImage,
          [],
        ),
        returnValue:
            _i19.Future<_i2.Either<_i20.Failure, Map<String, dynamic>>>.value(
                _FakeEither_0<_i20.Failure, Map<String, dynamic>>(
          this,
          Invocation.method(
            #selectImage,
            [],
          ),
        )),
      ) as _i19.Future<_i2.Either<_i20.Failure, Map<String, dynamic>>>);

  @override
  _i19.Future<String> getUserName(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getUserName,
          [key],
        ),
        returnValue: _i19.Future<String>.value(_i22.dummyValue<String>(
          this,
          Invocation.method(
            #getUserName,
            [key],
          ),
        )),
      ) as _i19.Future<String>);

  @override
  _i19.Future<bool> logoutUser(String? key) => (super.noSuchMethod(
        Invocation.method(
          #logoutUser,
          [key],
        ),
        returnValue: _i19.Future<bool>.value(false),
      ) as _i19.Future<bool>);
}

/// A class which mocks [EcommerceRemoteDataSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockEcommerceRemoteDataSourceImpl extends _i1.Mock
    implements _i23.EcommerceRemoteDataSourceImpl {
  MockEcommerceRemoteDataSourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Client get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeClient_1(
          this,
          Invocation.getter(#client),
        ),
      ) as _i3.Client);

  @override
  _i4.SharedPreferences get sharedPreferences => (super.noSuchMethod(
        Invocation.getter(#sharedPreferences),
        returnValue: _FakeSharedPreferences_2(
          this,
          Invocation.getter(#sharedPreferences),
        ),
      ) as _i4.SharedPreferences);

  @override
  _i19.Future<_i5.EcommerceModel> getProduct(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getProduct,
          [id],
        ),
        returnValue:
            _i19.Future<_i5.EcommerceModel>.value(_FakeEcommerceModel_3(
          this,
          Invocation.method(
            #getProduct,
            [id],
          ),
        )),
      ) as _i19.Future<_i5.EcommerceModel>);

  @override
  _i19.Future<List<_i5.EcommerceModel>> getAllProducts() => (super.noSuchMethod(
        Invocation.method(
          #getAllProducts,
          [],
        ),
        returnValue:
            _i19.Future<List<_i5.EcommerceModel>>.value(<_i5.EcommerceModel>[]),
      ) as _i19.Future<List<_i5.EcommerceModel>>);

  @override
  _i19.Future<bool> deleteProduct(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteProduct,
          [id],
        ),
        returnValue: _i19.Future<bool>.value(false),
      ) as _i19.Future<bool>);

  @override
  _i19.Future<bool> editProduct(
    String? id,
    Map<String, dynamic>? data,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #editProduct,
          [
            id,
            data,
          ],
        ),
        returnValue: _i19.Future<bool>.value(false),
      ) as _i19.Future<bool>);

  @override
  _i19.Future<bool> addProduct(Map<String, dynamic>? data) =>
      (super.noSuchMethod(
        Invocation.method(
          #addProduct,
          [data],
        ),
        returnValue: _i19.Future<bool>.value(false),
      ) as _i19.Future<bool>);
}

/// A class which mocks [NetworkInfoImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfoImpl extends _i1.Mock implements _i13.NetworkInfoImpl {
  MockNetworkInfoImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.InternetConnectionChecker get connectionChecker => (super.noSuchMethod(
        Invocation.getter(#connectionChecker),
        returnValue: _FakeInternetConnectionChecker_4(
          this,
          Invocation.getter(#connectionChecker),
        ),
      ) as _i6.InternetConnectionChecker);

  @override
  _i19.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i19.Future<bool>.value(false),
      ) as _i19.Future<bool>);
}

/// A class which mocks [InternetConnectionChecker].
///
/// See the documentation for Mockito's code generation for more information.
class MockInternetConnectionChecker extends _i1.Mock
    implements _i6.InternetConnectionChecker {
  MockInternetConnectionChecker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Duration get checkInterval => (super.noSuchMethod(
        Invocation.getter(#checkInterval),
        returnValue: _FakeDuration_5(
          this,
          Invocation.getter(#checkInterval),
        ),
      ) as Duration);

  @override
  Duration get checkTimeout => (super.noSuchMethod(
        Invocation.getter(#checkTimeout),
        returnValue: _FakeDuration_5(
          this,
          Invocation.getter(#checkTimeout),
        ),
      ) as Duration);

  @override
  List<_i6.AddressCheckOptions> get addresses => (super.noSuchMethod(
        Invocation.getter(#addresses),
        returnValue: <_i6.AddressCheckOptions>[],
      ) as List<_i6.AddressCheckOptions>);

  @override
  set addresses(List<_i6.AddressCheckOptions>? value) => super.noSuchMethod(
        Invocation.setter(
          #addresses,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i19.Future<bool> get hasConnection => (super.noSuchMethod(
        Invocation.getter(#hasConnection),
        returnValue: _i19.Future<bool>.value(false),
      ) as _i19.Future<bool>);

  @override
  _i19.Future<_i6.InternetConnectionStatus> get connectionStatus =>
      (super.noSuchMethod(
        Invocation.getter(#connectionStatus),
        returnValue: _i19.Future<_i6.InternetConnectionStatus>.value(
            _i6.InternetConnectionStatus.connected),
      ) as _i19.Future<_i6.InternetConnectionStatus>);

  @override
  _i19.Stream<_i6.InternetConnectionStatus> get onStatusChange =>
      (super.noSuchMethod(
        Invocation.getter(#onStatusChange),
        returnValue: _i19.Stream<_i6.InternetConnectionStatus>.empty(),
      ) as _i19.Stream<_i6.InternetConnectionStatus>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  bool get isActivelyChecking => (super.noSuchMethod(
        Invocation.getter(#isActivelyChecking),
        returnValue: false,
      ) as bool);

  @override
  _i19.Future<_i6.AddressCheckResult> isHostReachable(
          _i6.AddressCheckOptions? options) =>
      (super.noSuchMethod(
        Invocation.method(
          #isHostReachable,
          [options],
        ),
        returnValue:
            _i19.Future<_i6.AddressCheckResult>.value(_FakeAddressCheckResult_6(
          this,
          Invocation.method(
            #isHostReachable,
            [options],
          ),
        )),
      ) as _i19.Future<_i6.AddressCheckResult>);
}

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i4.SharedPreferences {
  MockSharedPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Set<String> getKeys() => (super.noSuchMethod(
        Invocation.method(
          #getKeys,
          [],
        ),
        returnValue: <String>{},
      ) as Set<String>);

  @override
  Object? get(String? key) => (super.noSuchMethod(Invocation.method(
        #get,
        [key],
      )) as Object?);

  @override
  bool? getBool(String? key) => (super.noSuchMethod(Invocation.method(
        #getBool,
        [key],
      )) as bool?);

  @override
  int? getInt(String? key) => (super.noSuchMethod(Invocation.method(
        #getInt,
        [key],
      )) as int?);

  @override
  double? getDouble(String? key) => (super.noSuchMethod(Invocation.method(
        #getDouble,
        [key],
      )) as double?);

  @override
  String? getString(String? key) => (super.noSuchMethod(Invocation.method(
        #getString,
        [key],
      )) as String?);

  @override
  bool containsKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
      ) as bool);

  @override
  List<String>? getStringList(String? key) =>
      (super.noSuchMethod(Invocation.method(
        #getStringList,
        [key],
      )) as List<String>?);

  @override
  _i19.Future<bool> setBool(
    String? key,
    bool? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBool,
          [
            key,
            value,
          ],
        ),
        returnValue: _i19.Future<bool>.value(false),
      ) as _i19.Future<bool>);

  @override
  _i19.Future<bool> setInt(
    String? key,
    int? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setInt,
          [
            key,
            value,
          ],
        ),
        returnValue: _i19.Future<bool>.value(false),
      ) as _i19.Future<bool>);

  @override
  _i19.Future<bool> setDouble(
    String? key,
    double? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDouble,
          [
            key,
            value,
          ],
        ),
        returnValue: _i19.Future<bool>.value(false),
      ) as _i19.Future<bool>);

  @override
  _i19.Future<bool> setString(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setString,
          [
            key,
            value,
          ],
        ),
        returnValue: _i19.Future<bool>.value(false),
      ) as _i19.Future<bool>);

  @override
  _i19.Future<bool> setStringList(
    String? key,
    List<String>? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setStringList,
          [
            key,
            value,
          ],
        ),
        returnValue: _i19.Future<bool>.value(false),
      ) as _i19.Future<bool>);

  @override
  _i19.Future<bool> remove(String? key) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [key],
        ),
        returnValue: _i19.Future<bool>.value(false),
      ) as _i19.Future<bool>);

  @override
  _i19.Future<bool> commit() => (super.noSuchMethod(
        Invocation.method(
          #commit,
          [],
        ),
        returnValue: _i19.Future<bool>.value(false),
      ) as _i19.Future<bool>);

  @override
  _i19.Future<bool> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i19.Future<bool>.value(false),
      ) as _i19.Future<bool>);

  @override
  _i19.Future<void> reload() => (super.noSuchMethod(
        Invocation.method(
          #reload,
          [],
        ),
        returnValue: _i19.Future<void>.value(),
        returnValueForMissingStub: _i19.Future<void>.value(),
      ) as _i19.Future<void>);
}

/// A class which mocks [LocalDataSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalDataSourceImpl extends _i1.Mock
    implements _i24.LocalDataSourceImpl {
  MockLocalDataSourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.SharedPreferences get sharedPreferences => (super.noSuchMethod(
        Invocation.getter(#sharedPreferences),
        returnValue: _FakeSharedPreferences_2(
          this,
          Invocation.getter(#sharedPreferences),
        ),
      ) as _i4.SharedPreferences);

  @override
  _i19.Future<List<_i5.EcommerceModel>> getAllFromLocal() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllFromLocal,
          [],
        ),
        returnValue:
            _i19.Future<List<_i5.EcommerceModel>>.value(<_i5.EcommerceModel>[]),
      ) as _i19.Future<List<_i5.EcommerceModel>>);

  @override
  _i19.Future<_i5.EcommerceModel> getSingleProduct(String? num) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSingleProduct,
          [num],
        ),
        returnValue:
            _i19.Future<_i5.EcommerceModel>.value(_FakeEcommerceModel_3(
          this,
          Invocation.method(
            #getSingleProduct,
            [num],
          ),
        )),
      ) as _i19.Future<_i5.EcommerceModel>);

  @override
  _i19.Future<bool> addCach(_i5.EcommerceModel? data) => (super.noSuchMethod(
        Invocation.method(
          #addCach,
          [data],
        ),
        returnValue: _i19.Future<bool>.value(false),
      ) as _i19.Future<bool>);

  @override
  _i19.Future<bool> deleteCach(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteCach,
          [id],
        ),
        returnValue: _i19.Future<bool>.value(false),
      ) as _i19.Future<bool>);

  @override
  _i19.Future<String> getName(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getName,
          [key],
        ),
        returnValue: _i19.Future<String>.value(_i22.dummyValue<String>(
          this,
          Invocation.method(
            #getName,
            [key],
          ),
        )),
      ) as _i19.Future<String>);

  @override
  _i19.Future<String?> getToken() => (super.noSuchMethod(
        Invocation.method(
          #getToken,
          [],
        ),
        returnValue: _i19.Future<String?>.value(),
      ) as _i19.Future<String?>);

  @override
  _i19.Future<bool> deleteToken(String? key) => (super.noSuchMethod(
        Invocation.method(
          #deleteToken,
          [key],
        ),
        returnValue: _i19.Future<bool>.value(false),
      ) as _i19.Future<bool>);
}

/// A class which mocks [EcommerceUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockEcommerceUsecase extends _i1.Mock implements _i8.EcommerceUsecase {
  MockEcommerceUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.EcommerceRepositories get repositories => (super.noSuchMethod(
        Invocation.getter(#repositories),
        returnValue: _FakeEcommerceRepositories_7(
          this,
          Invocation.getter(#repositories),
        ),
      ) as _i7.EcommerceRepositories);

  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
      ) as List<Object?>);

  @override
  _i19.Future<_i2.Either<_i20.Failure, List<_i21.EcommerceEntity>>>
      dataForAll() => (super.noSuchMethod(
            Invocation.method(
              #dataForAll,
              [],
            ),
            returnValue: _i19.Future<
                    _i2.Either<_i20.Failure, List<_i21.EcommerceEntity>>>.value(
                _FakeEither_0<_i20.Failure, List<_i21.EcommerceEntity>>(
              this,
              Invocation.method(
                #dataForAll,
                [],
              ),
            )),
          ) as _i19
              .Future<_i2.Either<_i20.Failure, List<_i21.EcommerceEntity>>>);

  @override
  _i19.Future<_i2.Either<_i20.Failure, _i21.EcommerceEntity>> dataById(
          String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #dataById,
          [id],
        ),
        returnValue:
            _i19.Future<_i2.Either<_i20.Failure, _i21.EcommerceEntity>>.value(
                _FakeEither_0<_i20.Failure, _i21.EcommerceEntity>(
          this,
          Invocation.method(
            #dataById,
            [id],
          ),
        )),
      ) as _i19.Future<_i2.Either<_i20.Failure, _i21.EcommerceEntity>>);

  @override
  _i19.Future<_i2.Either<_i20.Failure, bool>> editProduct(
    String? id,
    Map<String, dynamic>? jsonString,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #editProduct,
          [
            id,
            jsonString,
          ],
        ),
        returnValue: _i19.Future<_i2.Either<_i20.Failure, bool>>.value(
            _FakeEither_0<_i20.Failure, bool>(
          this,
          Invocation.method(
            #editProduct,
            [
              id,
              jsonString,
            ],
          ),
        )),
      ) as _i19.Future<_i2.Either<_i20.Failure, bool>>);

  @override
  _i19.Future<_i2.Either<_i20.Failure, bool>> deleteProduct(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteProduct,
          [id],
        ),
        returnValue: _i19.Future<_i2.Either<_i20.Failure, bool>>.value(
            _FakeEither_0<_i20.Failure, bool>(
          this,
          Invocation.method(
            #deleteProduct,
            [id],
          ),
        )),
      ) as _i19.Future<_i2.Either<_i20.Failure, bool>>);

  @override
  _i19.Future<_i2.Either<_i20.Failure, bool>> addProducts(
          Map<String, dynamic>? jsonString) =>
      (super.noSuchMethod(
        Invocation.method(
          #addProducts,
          [jsonString],
        ),
        returnValue: _i19.Future<_i2.Either<_i20.Failure, bool>>.value(
            _FakeEither_0<_i20.Failure, bool>(
          this,
          Invocation.method(
            #addProducts,
            [jsonString],
          ),
        )),
      ) as _i19.Future<_i2.Either<_i20.Failure, bool>>);

  @override
  _i19.Future<_i2.Either<_i20.Failure, Map<String, dynamic>>> selectImage() =>
      (super.noSuchMethod(
        Invocation.method(
          #selectImage,
          [],
        ),
        returnValue:
            _i19.Future<_i2.Either<_i20.Failure, Map<String, dynamic>>>.value(
                _FakeEither_0<_i20.Failure, Map<String, dynamic>>(
          this,
          Invocation.method(
            #selectImage,
            [],
          ),
        )),
      ) as _i19.Future<_i2.Either<_i20.Failure, Map<String, dynamic>>>);

  @override
  _i19.Future<String> getName(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getName,
          [key],
        ),
        returnValue: _i19.Future<String>.value(_i22.dummyValue<String>(
          this,
          Invocation.method(
            #getName,
            [key],
          ),
        )),
      ) as _i19.Future<String>);

  @override
  _i19.Future<bool> deleteToken(String? key) => (super.noSuchMethod(
        Invocation.method(
          #deleteToken,
          [key],
        ),
        returnValue: _i19.Future<bool>.value(false),
      ) as _i19.Future<bool>);
}

/// A class which mocks [ProductBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductBloc extends _i1.Mock implements _i25.ProductBloc {
  MockProductBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.EcommerceUsecase get ecommerceUsecase => (super.noSuchMethod(
        Invocation.getter(#ecommerceUsecase),
        returnValue: _FakeEcommerceUsecase_8(
          this,
          Invocation.getter(#ecommerceUsecase),
        ),
      ) as _i8.EcommerceUsecase);

  @override
  _i9.ProductState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeProductState_9(
          this,
          Invocation.getter(#state),
        ),
      ) as _i9.ProductState);

  @override
  _i19.Stream<_i9.ProductState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i19.Stream<_i9.ProductState>.empty(),
      ) as _i19.Stream<_i9.ProductState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i26.ProductEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i26.ProductEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i9.ProductState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i26.ProductEvent>(
    _i27.EventHandler<E, _i9.ProductState>? handler, {
    _i27.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i27.Transition<_i26.ProductEvent, _i9.ProductState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i19.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i19.Future<void>.value(),
        returnValueForMissingStub: _i19.Future<void>.value(),
      ) as _i19.Future<void>);

  @override
  void onChange(_i27.Change<_i9.ProductState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ImageBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockImageBloc extends _i1.Mock implements _i28.ImageBloc {
  MockImageBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.EcommerceUsecase get ecommerceUsecase => (super.noSuchMethod(
        Invocation.getter(#ecommerceUsecase),
        returnValue: _FakeEcommerceUsecase_8(
          this,
          Invocation.getter(#ecommerceUsecase),
        ),
      ) as _i8.EcommerceUsecase);

  @override
  _i10.ImageState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeImageState_10(
          this,
          Invocation.getter(#state),
        ),
      ) as _i10.ImageState);

  @override
  _i19.Stream<_i10.ImageState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i19.Stream<_i10.ImageState>.empty(),
      ) as _i19.Stream<_i10.ImageState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i29.ImageEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i29.ImageEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i10.ImageState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i29.ImageEvent>(
    _i27.EventHandler<E, _i10.ImageState>? handler, {
    _i27.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i27.Transition<_i29.ImageEvent, _i10.ImageState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i19.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i19.Future<void>.value(),
        returnValueForMissingStub: _i19.Future<void>.value(),
      ) as _i19.Future<void>);

  @override
  void onChange(_i27.Change<_i10.ImageState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ButtonBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockButtonBloc extends _i1.Mock implements _i30.ButtonBloc {
  MockButtonBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.EcommerceUsecase get ecommerceUsecase => (super.noSuchMethod(
        Invocation.getter(#ecommerceUsecase),
        returnValue: _FakeEcommerceUsecase_8(
          this,
          Invocation.getter(#ecommerceUsecase),
        ),
      ) as _i8.EcommerceUsecase);

  @override
  _i11.BottumState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeBottumState_11(
          this,
          Invocation.getter(#state),
        ),
      ) as _i11.BottumState);

  @override
  _i19.Stream<_i11.BottumState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i19.Stream<_i11.BottumState>.empty(),
      ) as _i19.Stream<_i11.BottumState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i31.ButtonEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i31.ButtonEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i11.BottumState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i31.ButtonEvent>(
    _i27.EventHandler<E, _i11.BottumState>? handler, {
    _i27.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i27.Transition<_i31.ButtonEvent, _i11.BottumState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i19.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i19.Future<void>.value(),
        returnValueForMissingStub: _i19.Future<void>.value(),
      ) as _i19.Future<void>);

  @override
  void onChange(_i27.Change<_i11.BottumState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [LoginRepositories].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginRepositories extends _i1.Mock implements _i15.LoginRepositories {
  MockLoginRepositories() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.Future<_i2.Either<_i20.Failure, _i32.LoginEntity>> login(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            email,
            password,
          ],
        ),
        returnValue:
            _i19.Future<_i2.Either<_i20.Failure, _i32.LoginEntity>>.value(
                _FakeEither_0<_i20.Failure, _i32.LoginEntity>(
          this,
          Invocation.method(
            #login,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i19.Future<_i2.Either<_i20.Failure, _i32.LoginEntity>>);

  @override
  _i19.Future<_i2.Either<_i20.Failure, _i32.LoginEntity>> forgotPassword(
          String? email) =>
      (super.noSuchMethod(
        Invocation.method(
          #forgotPassword,
          [email],
        ),
        returnValue:
            _i19.Future<_i2.Either<_i20.Failure, _i32.LoginEntity>>.value(
                _FakeEither_0<_i20.Failure, _i32.LoginEntity>(
          this,
          Invocation.method(
            #forgotPassword,
            [email],
          ),
        )),
      ) as _i19.Future<_i2.Either<_i20.Failure, _i32.LoginEntity>>);

  @override
  _i19.Future<_i2.Either<_i20.Failure, bool>> register(
    String? email,
    String? password,
    String? fullName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [
            email,
            password,
            fullName,
          ],
        ),
        returnValue: _i19.Future<_i2.Either<_i20.Failure, bool>>.value(
            _FakeEither_0<_i20.Failure, bool>(
          this,
          Invocation.method(
            #register,
            [
              email,
              password,
              fullName,
            ],
          ),
        )),
      ) as _i19.Future<_i2.Either<_i20.Failure, bool>>);
}

/// A class which mocks [LoginRepoImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginRepoImpl extends _i1.Mock implements _i33.LoginRepoImpl {
  MockLoginRepoImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.RemoteDatasource get remoteDatasourceImpl => (super.noSuchMethod(
        Invocation.getter(#remoteDatasourceImpl),
        returnValue: _FakeRemoteDatasource_12(
          this,
          Invocation.getter(#remoteDatasourceImpl),
        ),
      ) as _i12.RemoteDatasource);

  @override
  _i19.Future<_i2.Either<_i20.Failure, _i32.LoginEntity>> forgotPassword(
          String? email) =>
      (super.noSuchMethod(
        Invocation.method(
          #forgotPassword,
          [email],
        ),
        returnValue:
            _i19.Future<_i2.Either<_i20.Failure, _i32.LoginEntity>>.value(
                _FakeEither_0<_i20.Failure, _i32.LoginEntity>(
          this,
          Invocation.method(
            #forgotPassword,
            [email],
          ),
        )),
      ) as _i19.Future<_i2.Either<_i20.Failure, _i32.LoginEntity>>);

  @override
  _i19.Future<_i2.Either<_i20.Failure, _i32.LoginEntity>> login(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            email,
            password,
          ],
        ),
        returnValue:
            _i19.Future<_i2.Either<_i20.Failure, _i32.LoginEntity>>.value(
                _FakeEither_0<_i20.Failure, _i32.LoginEntity>(
          this,
          Invocation.method(
            #login,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i19.Future<_i2.Either<_i20.Failure, _i32.LoginEntity>>);

  @override
  _i19.Future<_i2.Either<_i20.Failure, bool>> register(
    String? email,
    String? password,
    String? fullName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [
            email,
            password,
            fullName,
          ],
        ),
        returnValue: _i19.Future<_i2.Either<_i20.Failure, bool>>.value(
            _FakeEither_0<_i20.Failure, bool>(
          this,
          Invocation.method(
            #register,
            [
              email,
              password,
              fullName,
            ],
          ),
        )),
      ) as _i19.Future<_i2.Either<_i20.Failure, bool>>);
}

/// A class which mocks [RemoteDatasourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteDatasourceImpl extends _i1.Mock
    implements _i12.RemoteDatasourceImpl {
  MockRemoteDatasourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Client get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeClient_1(
          this,
          Invocation.getter(#client),
        ),
      ) as _i3.Client);

  @override
  _i13.NetworkInfo get networkInfo => (super.noSuchMethod(
        Invocation.getter(#networkInfo),
        returnValue: _FakeNetworkInfo_13(
          this,
          Invocation.getter(#networkInfo),
        ),
      ) as _i13.NetworkInfo);

  @override
  _i4.SharedPreferences get sharedPreferences => (super.noSuchMethod(
        Invocation.getter(#sharedPreferences),
        returnValue: _FakeSharedPreferences_2(
          this,
          Invocation.getter(#sharedPreferences),
        ),
      ) as _i4.SharedPreferences);

  @override
  _i19.Future<_i2.Either<_i20.Failure, _i32.LoginEntity>> login(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            email,
            password,
          ],
        ),
        returnValue:
            _i19.Future<_i2.Either<_i20.Failure, _i32.LoginEntity>>.value(
                _FakeEither_0<_i20.Failure, _i32.LoginEntity>(
          this,
          Invocation.method(
            #login,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i19.Future<_i2.Either<_i20.Failure, _i32.LoginEntity>>);

  @override
  _i19.Future<_i2.Either<_i20.Failure, bool>> register(
    String? email,
    String? password,
    String? fullName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [
            email,
            password,
            fullName,
          ],
        ),
        returnValue: _i19.Future<_i2.Either<_i20.Failure, bool>>.value(
            _FakeEither_0<_i20.Failure, bool>(
          this,
          Invocation.method(
            #register,
            [
              email,
              password,
              fullName,
            ],
          ),
        )),
      ) as _i19.Future<_i2.Either<_i20.Failure, bool>>);
}

/// A class which mocks [LoginUserStatesBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginUserStatesBloc extends _i1.Mock
    implements _i34.LoginUserStatesBloc {
  MockLoginUserStatesBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.EcommerceUsecase get ecommerceUsecase => (super.noSuchMethod(
        Invocation.getter(#ecommerceUsecase),
        returnValue: _FakeEcommerceUsecase_8(
          this,
          Invocation.getter(#ecommerceUsecase),
        ),
      ) as _i8.EcommerceUsecase);

  @override
  _i14.LoginUserStates get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeLoginUserStates_14(
          this,
          Invocation.getter(#state),
        ),
      ) as _i14.LoginUserStates);

  @override
  _i19.Stream<_i14.LoginUserStates> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i19.Stream<_i14.LoginUserStates>.empty(),
      ) as _i19.Stream<_i14.LoginUserStates>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i35.LoginUserStatesEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i35.LoginUserStatesEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i14.LoginUserStates? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i35.LoginUserStatesEvent>(
    _i27.EventHandler<E, _i14.LoginUserStates>? handler, {
    _i27.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i27.Transition<_i35.LoginUserStatesEvent, _i14.LoginUserStates>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i19.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i19.Future<void>.value(),
        returnValueForMissingStub: _i19.Future<void>.value(),
      ) as _i19.Future<void>);

  @override
  void onChange(_i27.Change<_i14.LoginUserStates>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [LoginUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginUseCase extends _i1.Mock implements _i16.LoginUseCase {
  MockLoginUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i15.LoginRepositories get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeLoginRepositories_15(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i15.LoginRepositories);

  @override
  _i19.Future<_i2.Either<_i20.Failure, _i32.LoginEntity>> loginUser(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #loginUser,
          [
            email,
            password,
          ],
        ),
        returnValue:
            _i19.Future<_i2.Either<_i20.Failure, _i32.LoginEntity>>.value(
                _FakeEither_0<_i20.Failure, _i32.LoginEntity>(
          this,
          Invocation.method(
            #loginUser,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i19.Future<_i2.Either<_i20.Failure, _i32.LoginEntity>>);

  @override
  _i19.Future<_i2.Either<_i20.Failure, _i32.LoginEntity>> forgotPassword(
          String? email) =>
      (super.noSuchMethod(
        Invocation.method(
          #forgotPassword,
          [email],
        ),
        returnValue:
            _i19.Future<_i2.Either<_i20.Failure, _i32.LoginEntity>>.value(
                _FakeEither_0<_i20.Failure, _i32.LoginEntity>(
          this,
          Invocation.method(
            #forgotPassword,
            [email],
          ),
        )),
      ) as _i19.Future<_i2.Either<_i20.Failure, _i32.LoginEntity>>);

  @override
  _i19.Future<_i2.Either<_i20.Failure, bool>> registerUser(
    String? email,
    String? password,
    String? fullName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #registerUser,
          [
            email,
            password,
            fullName,
          ],
        ),
        returnValue: _i19.Future<_i2.Either<_i20.Failure, bool>>.value(
            _FakeEither_0<_i20.Failure, bool>(
          this,
          Invocation.method(
            #registerUser,
            [
              email,
              password,
              fullName,
            ],
          ),
        )),
      ) as _i19.Future<_i2.Either<_i20.Failure, bool>>);
}

/// A class which mocks [LoginBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginBloc extends _i1.Mock implements _i36.LoginBloc {
  MockLoginBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i16.LoginUseCase get loginUseCase => (super.noSuchMethod(
        Invocation.getter(#loginUseCase),
        returnValue: _FakeLoginUseCase_16(
          this,
          Invocation.getter(#loginUseCase),
        ),
      ) as _i16.LoginUseCase);

  @override
  _i17.LoginState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeLoginState_17(
          this,
          Invocation.getter(#state),
        ),
      ) as _i17.LoginState);

  @override
  _i19.Stream<_i17.LoginState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i19.Stream<_i17.LoginState>.empty(),
      ) as _i19.Stream<_i17.LoginState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i37.LoginEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i37.LoginEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i17.LoginState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i37.LoginEvent>(
    _i27.EventHandler<E, _i17.LoginState>? handler, {
    _i27.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i27.Transition<_i37.LoginEvent, _i17.LoginState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i19.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i19.Future<void>.value(),
        returnValueForMissingStub: _i19.Future<void>.value(),
      ) as _i19.Future<void>);

  @override
  void onChange(_i27.Change<_i17.LoginState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [LoginRegistrationBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginRegistrationBloc extends _i1.Mock
    implements _i38.LoginRegistrationBloc {
  MockLoginRegistrationBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i16.LoginUseCase get loginUseCase => (super.noSuchMethod(
        Invocation.getter(#loginUseCase),
        returnValue: _FakeLoginUseCase_16(
          this,
          Invocation.getter(#loginUseCase),
        ),
      ) as _i16.LoginUseCase);

  @override
  _i18.LoginRegistrationState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeLoginRegistrationState_18(
          this,
          Invocation.getter(#state),
        ),
      ) as _i18.LoginRegistrationState);

  @override
  _i19.Stream<_i18.LoginRegistrationState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i19.Stream<_i18.LoginRegistrationState>.empty(),
      ) as _i19.Stream<_i18.LoginRegistrationState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i39.LoginRegistrationEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i39.LoginRegistrationEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i18.LoginRegistrationState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i39.LoginRegistrationEvent>(
    _i27.EventHandler<E, _i18.LoginRegistrationState>? handler, {
    _i27.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i27.Transition<_i39.LoginRegistrationEvent,
                  _i18.LoginRegistrationState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i19.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i19.Future<void>.value(),
        returnValueForMissingStub: _i19.Future<void>.value(),
      ) as _i19.Future<void>);

  @override
  void onChange(_i27.Change<_i18.LoginRegistrationState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i3.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.Future<_i3.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i19.Future<_i3.Response>.value(_FakeResponse_19(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i19.Future<_i3.Response>);

  @override
  _i19.Future<_i3.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i19.Future<_i3.Response>.value(_FakeResponse_19(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i19.Future<_i3.Response>);

  @override
  _i19.Future<_i3.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i40.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i19.Future<_i3.Response>.value(_FakeResponse_19(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i19.Future<_i3.Response>);

  @override
  _i19.Future<_i3.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i40.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i19.Future<_i3.Response>.value(_FakeResponse_19(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i19.Future<_i3.Response>);

  @override
  _i19.Future<_i3.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i40.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i19.Future<_i3.Response>.value(_FakeResponse_19(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i19.Future<_i3.Response>);

  @override
  _i19.Future<_i3.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i40.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i19.Future<_i3.Response>.value(_FakeResponse_19(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i19.Future<_i3.Response>);

  @override
  _i19.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i19.Future<String>.value(_i22.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i19.Future<String>);

  @override
  _i19.Future<_i41.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i19.Future<_i41.Uint8List>.value(_i41.Uint8List(0)),
      ) as _i19.Future<_i41.Uint8List>);

  @override
  _i19.Future<_i3.StreamedResponse> send(_i3.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i19.Future<_i3.StreamedResponse>.value(_FakeStreamedResponse_20(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i19.Future<_i3.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i3.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.Future<_i3.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i19.Future<_i3.Response>.value(_FakeResponse_19(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i19.Future<_i3.Response>);

  @override
  _i19.Future<_i3.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i19.Future<_i3.Response>.value(_FakeResponse_19(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i19.Future<_i3.Response>);

  @override
  _i19.Future<_i3.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i40.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i19.Future<_i3.Response>.value(_FakeResponse_19(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i19.Future<_i3.Response>);

  @override
  _i19.Future<_i3.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i40.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i19.Future<_i3.Response>.value(_FakeResponse_19(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i19.Future<_i3.Response>);

  @override
  _i19.Future<_i3.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i40.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i19.Future<_i3.Response>.value(_FakeResponse_19(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i19.Future<_i3.Response>);

  @override
  _i19.Future<_i3.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i40.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i19.Future<_i3.Response>.value(_FakeResponse_19(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i19.Future<_i3.Response>);

  @override
  _i19.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i19.Future<String>.value(_i22.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i19.Future<String>);

  @override
  _i19.Future<_i41.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i19.Future<_i41.Uint8List>.value(_i41.Uint8List(0)),
      ) as _i19.Future<_i41.Uint8List>);

  @override
  _i19.Future<_i3.StreamedResponse> send(_i3.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i19.Future<_i3.StreamedResponse>.value(_FakeStreamedResponse_20(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i19.Future<_i3.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
